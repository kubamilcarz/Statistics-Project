songs = songs %>%
mutate(genre = as.factor(genre)) %>%
mutate(key = as.factor(key)) %>%
mutate(mode = as.factor(mode)) %>%
mutate(tempo = as.factor(tempo)) %>%
mutate(duration_min = (duration_ms/1000)/60) %>%
filter(duration_min > 1.2 & duration_min < 6) %>%
mutate(popularity = popularity/100) %%
select(!c("track_name", "artist_name", "duration_ms"))
songs = songs %>%
mutate(genre = as.factor(genre)) %>%
mutate(key = as.factor(key)) %>%
mutate(mode = as.factor(mode)) %>%
mutate(tempo = as.factor(tempo)) %>%
mutate(duration_min = (duration_ms/1000)/60) %>%
filter(duration_min > 1.2 & duration_min < 6) %>%
mutate(popularity = popularity/100) %>%
select(!c("track_name", "artist_name", "duration_ms"))
colnames(songs)
songs %>%
summarize(
corr = cor(energy, popularity)
)
songs %>%
summarize(
corr = cor(valence, popularity)
)
songs %>%
summarize(
corr = cor(key, popularity)
)
songs %>%
summarize(
corr = cor(duration_min, popularity)
)
data_log %>%
ggplot(aes(x = duration_min, y = popularity)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE)
fit %>%
ggplot(aes(duration_min, popularity)) +
geom_bar(stat="identity")
# ANOVA ---
library(haven)
# ANOVA ---
install.packages('haven')
install.packages("haven")
# ANOVA ---
install.packages('haven')
library(haven)
install.packages('stats')
library(stats)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
anova <- aov(valence~popularity, data = fit)
anova <- aov(valence~popularity, data = songs)
summary(anova)
fit %>%
ggplot(aes(genre, popularity)) +
geom_bar(stat="identity")
library(tidyverse)
songs %>%
summarize(
corr = cor(duration_min, popularity)
)
summary(fit)
fit %>%
ggplot(aes(genre, popularity)) +
geom_bar(stat="identity")
# Model ---
fit <- lm(popularity ~ valence * duration_min + key + genre, data = songs)
summary(fit)
data_log %>%
ggplot(aes(x = duration_min, y = popularity)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE)
data_log = songs %>% mutate(valence = log(valence), popularity = log(popularity))
data_log %>%
ggplot(aes(x = duration_min, y = popularity)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE)
fit %>%
ggplot(aes(genre, popularity)) +
geom_bar(stat="identity")
anova(fit)
summary(fit)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min + key + genre, data = songs)
fit_anova <- aov(popularity ~ valence * duration_min + key + genre, data = songs)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min + key + genre, data = songs)
fit_anova <- aov(popularity ~ valence * duration_min + key + genre, data = songs)
fit %>%
ggplot(aes(genre, popularity)) +
geom_bar(stat="identity")
fit_lm %>%
ggplot(aes(genre, popularity)) +
geom_bar(stat="identity")
fit_anova %>%
ggplot(aes(genre, popularity)) +
geom_bar(stat="identity")
summary(fit_lm)
summary(fit_anova)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min + genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min, data = songs)
summary(fit_lm)
colnames(songs)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min * danceability, data = songs)
# Model ---
fit_lm <- lm(popularity ~ (valence * duration_min * danceability)/genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min * (danceability)/genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min * danceability, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min + danceability, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence * duration_min * danceability + genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence * danceability + genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence + duration_min + danceability * genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence + duration_min * genre, data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence + (duration_min * genre) + duration_ms, data = songs)
# Model ---
fit_lm <- lm(popularity ~ valence + duration_min + (duration_min * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence + duration_min + danceability  + (duration_min * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ valence + duration_min + danceability + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
colnames(songs)
# Model ---
fit_lm <- lm(popularity ~ danceability + genre + duration_min + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability*key + duration_min + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability*key + duration_min*mode + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability*mode + duration_min + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
anova(fit_lm, fit_anova)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + valence + (danceability * genre), data = songs)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + valence + (duration_min * genre), data = songs)
summary(fit_lm)
summary(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
fit_anova <- aov(popularity ~ danceability + duration_min + valence + (duration_min * danceability * genre, data = songs)
fit_anova <- aov(popularity ~ danceability + duration_min + valence + (duration_min * danceability * genre), data = songs)
fit_anova <- aov(popularity ~ danceability + duration_min + valence + (duration_min * danceability * genre), data = songs)
summary(fit_lm)
summary(fit_anova)
anova(fit_lm, fit_anova)
plot(fit_lm)
durbinWatsonTest(fit_lm)
library(emmeans)
install.packages('emmeans')
library(emmeans)
durbinWatsonTest(fit_lm)
?durbinWatsonTest
??durbinWatsonTest
install.packages('ggpubr')
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
library(MASS)
durbinWatsonTest(fit_lm)
library(car)
install.packages('car')
library(car)
durbinWatsonTest(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + valence + (duration_min * genre), data = songs)
summary(fit_lm)
anova(fit_lm, fit_anova)
fit_anova <- aov(popularity ~ danceability + duration_min + valence + (duration_min  * genre), data = songs)
summary(fit_anova)
anova(fit_lm, fit_anova)
durbinWatsonTest(fit_lm)
durbinWatsonTest(fit_anova)
par(mfrow = c(2, 2))
plot(fit_lm)
plot(fit_anova)
hist(fit_lm$residuals)
plot(fitted(fit_lm), resid(fit_lm), xlab='Fitted Values', ylab='Residuals')
abline(0,0)
bptest(fit_lm)
install.packages('lmtest')
library(lmtest)
bptest(fit_lm)
durbinWatsonTest(fit_lm)
# Heteroscedasticity assumption
ncvTest(regression_multiple)
# Heteroscedasticity assumption
ncvTest(fit_lm)
chisq.test(fit_lm)
chisq.test(songs)
cross <- table(songs$genre, songs$popularity)
chisq.test(cross)
cross <- table(songs$key, songs$popularity)
chisq.test(cross)
cross <- table(songs$acousticness, songs$popularity)
chisq.test(cross)
cross <- table(songs$track_id, songs$popularity)
chisq.test(cross)
cross <- table(songs$genre, songs$popularity)
chisq.test(cross)
library(lsr)
install.packages('lsr')
library(lsr)
cross <- table(songs$genre, songs$popularity)
chisq.test(cross)
cramersV(cross) #strong dependency
cramersV(songs) #strong dependency
cramersV(fit_lm) #strong dependency
songs = songs %>%
mutate(genre = as.factor(genre)) %>%
mutate(key = as.factor(key)) %>%
mutate(mode = as.factor(mode)) %>%
mutate(tempo = as.factor(tempo)) %>%
mutate(duration_min = (duration_ms/1000)/60) %>%
filter(duration_min > 1.2 & duration_min < 6) %>%
mutate(popularity = popularity/100) %>%
filter(popularity >= 0 & popularity <= 100) %>%
select(!c("track_name", "artist_name", "duration_ms"))
songs = songs %>%
mutate(genre = as.factor(genre)) %>%
mutate(key = as.factor(key)) %>%
mutate(mode = as.factor(mode)) %>%
mutate(tempo = as.factor(tempo)) %>%
mutate(duration_min = (duration_ms/1000)/60) %>%
filter(duration_min > 1.2 & duration_min < 6) %>%
mutate(popularity = popularity/100) %>%
filter(popularity >= 0 & popularity <= 100) %>%
select(!c("track_name", "artist_name", "duration_ms"))
library(tidyverse)
songs = songs %>%
mutate(genre = as.factor(genre)) %>%
mutate(key = as.factor(key)) %>%
mutate(mode = as.factor(mode)) %>%
mutate(tempo = as.factor(tempo)) %>%
mutate(duration_min = (duration_ms/1000)/60) %>%
filter(duration_min > 1.2 & duration_min < 6) %>%
mutate(popularity = popularity/100) %>%
filter(popularity >= 0 & popularity <= 100) %>%
select(!c("track_name", "artist_name", "duration_ms"))
# load training data set
songs = read_csv("dataset/spotify.csv")
songs = songs %>%
mutate(genre = as.factor(genre)) %>%
mutate(key = as.factor(key)) %>%
mutate(mode = as.factor(mode)) %>%
mutate(tempo = as.factor(tempo)) %>%
mutate(duration_min = (duration_ms/1000)/60) %>%
filter(duration_min > 1.2 & duration_min < 6) %>%
mutate(popularity = popularity/100) %>%
filter(popularity >= 0 & popularity <= 100) %>%
select(!c("track_name", "artist_name", "duration_ms"))
colnames(songs)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + valence + (duration_min * genre), data = songs)
fit_anova <- aov(popularity ~ danceability + duration_min + valence + (duration_min  * genre), data = songs)
anova(fit_lm, fit_anova)
summary(fit_lm)
summary(fit_anova)
# Durbin Watson Test
durbinWatsonTest(fit_lm)
summary(fit_lm)
fit_lm %>%
ggplot(aes(genre, popularity)) +
geom_point() +
stat_smooth(method = lm, se = FALSE) +
geom_segment(aes(xend = genre, yend = .fitted), color = "red", size = 0.3)
fit_lm %>%
ggplot(aes(valence, popularity)) +
geom_point() +
stat_smooth(method = lm, se = FALSE) +
geom_segment(aes(xend = valence, yend = .fitted), color = "red", size = 0.3)
# linearity test
plot(fit_lm, 1)
par(mfrow = c(2, 2))
plot(fit_lm)
# Heteroscedasticity assumption
ncvTest(fit_lm)
# Durbin Watson Test
durbinWatsonTest(fit_lm)
# Heteroscedasticity assumption
ncvTest(fit_lm)
# Model ---
fit_lm <- glm(popularity ~ danceability + duration_min + valence + (duration_min * genre),
family = poisson(link = "log"),
data = songs)
summary(fit_lm)
anova(fit_lm, fit_anova)
# Durbin Watson Test
durbinWatsonTest(fit_lm)
plot(fit_lm)
# Model ---
fit_lm <- glm(popularity ~ danceability + duration_min + valence + genre,
family = poisson(link = "log"),
data = songs)
plot(fit_lm)
summary(fit_lm)
# Breusch-Pagan test
bptest(fit_lm)
plot(fitted(fit_lm), resid(fit_lm), xlab='Fitted Values', ylab='Residuals')
# Heteroscedasticity assumption
ncvTest(fit_lm)
anova(fit_lm, fit_anova)
# Model ---
fit_lm <- glm(popularity ~ danceability + duration_min + valence + genre,
family = poisson(link = "log"),
data = songs)
summary(fit_lm)
# Model ---
fit_lm <- glm(popularity ~ danceability + duration_min + valence + genre,
family = binomial(link = "logit"),
data = songs)
summary(fit_lm)
anova(fit_lm, fit_anova)
# Durbin Watson Test
durbinWatsonTest(fit_lm)
describe(songs)
library(psych)
colnames(songs)
# Model ---
fit_lm <- glm(popularity ~ danceability + duration_min + energy * genre,
family = binomial(link = "logit"),
data = songs)
summary(fit_lm)
fit_ancova <- aovc(popularity ~ danceability + duration_min + energy * genre,
data = songs)
fit_ancova <- ancova(popularity ~ danceability + duration_min + energy * genre,
data = songs)
fit_ancova <- ancova(popularity ~ danceability + duration_min + energy * genre,
data = songs)
?ancova()
?ancova
anova(fit_lm)
# Model ---
fit_lm <- lm(popularity ~ danceability + duration_min + energy * genre,
data = songs)
anova(fit_lm)
fit_ancova <- aov(popularity ~ danceability + energe + Error(energy) * genre)
fit_ancova <- aov(popularity ~ danceability + energe + Error(energy) * genre, data = songs)
fit_ancova <- aov(popularity ~ danceability + energy + Error(energy) * genre, data = songs)
fit_ancova <- aov(popularity ~ danceability + energy + Error(genre) * genre, data = songs)
fit_ancova <- aov(popularity ~ danceability + energy + Error(genre) + genre, data = songs)
library(car)
fit_ancova <- aov(popularity ~ danceability + energy + Error(genre) + genre, data = songs)
summary(fit_anova)
durbinWatsonTest(fit_ancova)
TukeyHSD(fit_ancova)
TukeyHSD(fit_ancova, p.adjust="fdr")
TukeyHSD(songs, p.adjust="fdr")
TukeyHSD(fit_ancova, p.adjust="fdr")
TukeyHSD(fit_ancova, p.adjust("fdr"))
TukeyHSD(fit_lm, p.adjust("fdr"))
TukeyHSD(fit_lm, p.adjust="fdr")
TukeyHSD(fit_lm, p.adjust="fdr")
#
cor(fit_lm)
#
cor(fit_ancova)
#
print(cor(fit_ancova))
#
cor(fit_ancova)
#
cor(songs)
#
cor(fit_lm)
#
cor(fit_lm$coefficients, fit_lm$residuals)
#
cor(fit_lm$coefficients, fit_lm$residuals)
#
cor(fit_lm$residuals, fit_lm$coefficients)
#
cor(fit_lm$residuals, fit_lm$effects)
#
cor(fit_lm$coefficients, fit_lm$effects)
#
vif(fit_lm)
#
vifs = vif(fit_lm)
vifs_df <- data.frame(variable=row.names(vifs), vif=vifs[,1])
ggplot(melt(vifs_df), aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity", width=0.7) +
theme_minimal() +
xlab("Predictor") +
ylab("VIF") +
ggtitle("Variance Inflation Factors")
ggplot(melt(vifs_df), aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity", width=0.7) +
xlab("Predictor") +
ylab("VIF") +
ggtitle("Variance Inflation Factors")
ggplot(vifs_df, aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity", width=0.7) +
xlab("Predictor") +
ylab("VIF") +
ggtitle("Variance Inflation Factors")
ggplot(melt(vifs_df), aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity", width=0.7) +
xlab("Predictor") +
ylab("VIF") +
ggtitle("Variance Inflation Factors")
ggplot(vifs_df, aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity", width=0.7) +
xlab("Predictor") +
ylab("VIF") +
ggtitle("Variance Inflation Factors")
View(vifs_df)
ggplot(vifs_df, aes(x=variable, y=vif, fill=vif)) +
geom_bar(stat="identity", width=0.7) +
xlab("Predictor") +
ylab("VIF") +
ggtitle("Variance Inflation Factors")
# Residuals
residuals <- residuals(model)
# Residuals
residuals <- residuals(fit_lm)
qqnorm(residuals)
qqline(residuals)
qqnorm(residuals)
qqline(residuals)
qqline(residuals)
qqline(residuals)
qqnorm(residuals)
plot(fitted(fit_lm), resid(fit_lm), xlab='Fitted Values', ylab='Residuals')
library(car)
library(lmtest)
qqnorm(residuals)
qqline(residuals)
# Residuals: Shapiro Test
shapiro.test(residuals)
# Residuals: Shapiro Test
shapiro.test(residuals[sample(nrow(residuals), 4000), ])
# Residuals: Shapiro Test
shapiro.test(residuals[sample(nrow(residuals), 2000), ])
# Residuals: Shapiro Test
shapiro.test(residuals[sample(1:nrow(residuals), 100, replace = FALSE), ])
# Residuals: Shapiro Test
shapiro.test(residuals %>% sample_frac(0.2))
shapiro.test(sample_residuals)
# Residuals: Shapiro Test
sample_residuals = residuals %>% sample_frac(0.2)
shapiro.test(sample_residuals)
# Residuals: Shapiro Test
sample_residuals = residuals %>% sample_frac(0.2)
shapiro.test(sample_residuals)
# Residuals: Shapiro Test
sample_residuals = residuals[sample(1:nrow(residuals), 100, replace = TRUE), ]
shapiro.test(sample_residuals)
# Residuals: Shapiro Test
sample_residuals = residuals[sample(1:nrow(residuals), 100, replace = TRUE), ]
shapiro.test(sample_residuals)
# Residuals: Shapiro Test
sample_residuals = sample_n(2000)
# Residuals: Shapiro Test
sample_residuals = sample_n(2000)
# Residuals: Shapiro Test
sample_residuals = sample_n(2000.0)
shapiro.test(sample_residuals)
shapiro.test(residuals)
shapiro.test(residuals)
residuals.length
residuals
# Residuals: Shapiro Test
sample_residuals = residuals.head(5000)
shapiro.test(sample_residuals)
# Residuals: Shapiro Test
sample_residuals = head(residuals, 5000)
shapiro.test(sample_residuals)
# Cook's Distance
cooks.distance(fit_lm)
plot(fit_lm, which = 4)
# Cook's Distance
cook = cooks.distance(fit_lm)
summary(cook)
